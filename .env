DB_CONNECTION = mongodb+srv://splashtest:splashtest@cluster0.rnchn.mongodb.net/splashcash-test?retryWrites=true&w=majority
SECRET = JGHCFJH,B,JHB,KLVHGJNJH.JKB
TWILIO_ACCOUNT_SID = ACd7d5320b82ae27bda15ebe29ccbb9f61
TWILIO_AUTHE_TOKEN = a7c8fbc9fb0c33699ede6232c064b865
BOT_TOKEN = 1305066920:AAEcJ5MEM2SNDnb-82ypWLcYCPFe7twyt4c


fghtt = 

router.patch("/confirmpayment/", async (req, res) => {
  try {
    // INPUTS
    const {
      gher_email,
      pher_email,
      pher_name,
      gher_name,
      _id: receiptId,
      amount,
      popPath,
    } = req.body;
    const oneuser = await User.findOne({ email: pher_email }, "pledge");
    const pledgelength = oneuser.pledge.length;
    const currentPledgeAmt = oneuser.pledge[pledgelength - 1].amount;
    // UPDATE HISTORY OF GHER AND PHER
    const addToPherHistory = await User.findOneAndUpdate(
      { email: pher_email },
      {
        $push: {
          investHistory: {
            name: gher_name,
            amount: amount,
          },
        },
      }
    );
    const index = addToPherHistory.pledge.length;
    const { pledge } = addToPherHistory;
    console.log("Pher's investHistory Updated");
    const addToGherHistory = await User.findOneAndUpdate(
      { email: gher_email },
      {
        $push: {
          cashoutHistory: {
            name: pher_name,
            amount: amount,
          },
        },
      }
    );
    console.log("Gher's cashoutHistory Updated");
    // CHECK IF IT IS FIRST PLEDGE
    if ((pledgelength = 1)) {
      // check for old Commits
      const oldCommitExist = await Committer.findOne({
        email: pher_email,
      });
      if (oldCommitExist) {
        // update Commit
        const oldCommitAmt = oldCommitExist.amount;
        const newtotalAmt = oldCommitAmt + amount;
        if ((newtotalAmt = currentPledgeAmt)) {
          const updateOldCommitsAmount = await Committer.findOneAndUpdate(
            { email: pher_email },
            { amount: newtotalAmt, isFulfilled: true }
          );
          const setPherRecommitToTrue = await User.findOneAndUpdate(
            { email: pher_email },
            { recommit: true }
          );
          //ADD TO DOWNLINE
          const userF = await User.findOne({ email: pher_email }, "upline");
          const { upline } = userF;
          const updateDown = await user.findOneAndUpdate(
            { username: upline },
            {
              $push: {
                downline: {
                  name: pher_name,
                  amount: amount * 0.05,
                },
              },
            }
          );
          console.log(
            "Commit Updated, isFufilled:true and Recommit:true, Downline Updated"
          );
          res.send("Successful");
        } else {
          const updateOldCommitsAmount2 = await Committer.findOneAndUpdate(
            { email: pher_email },
            { amount: newtotalAmt, isFulfilled: false }
          );
          console.log("Commit Updated, isFufilled:false");
          res.send("Successful");
        }
      } else {
        if ((amount = currentPledgeAmt)) {
          const newCommitter = new Committer({
            email: pher_email,
            amount: amount,
            isFulfilled: true,
          });
          const savedCommiter = await newCommitter.save();
          const setPherRecommitToTrue = await User.findOneAndUpdate(
            { email: pher_email },
            { recommit: true }
          );
          //ADD TO DOWNLINE
          const userF1 = await User.findOne({ email: gher_email }, "upline");
          const { upline } = userF1;
          const updateUpline1 = await user.findOneAndUpdate(
            { username: upline },
            {
              $push: {
                downline: {
                  name: pher_name,
                  amount: amount,
                },
              },
            }
          );
          console.log(
            "New Commit Created, isFufilled:true and Recommit:true, downline updated"
          );
          res.send("Successful");
        } else {
          const newCommitter = new Committer({
            email: pher_email,
            amount: amount,
            isFulfilled: false,
          });
          const savedCommiter = await newCommitter.save();
          console.log("New Commit Created, isFufilled:false");
          res.send("Successful");
        }
      }
    } else {
      const oldCommitExist = await Committer.findOne({
        email: pher_email,
      });
      const oldCommitFulfilmentStatus = oldCommitExist.isFulfilled;
      if (oldCommitFulfilmentStatus) {
        // MOVE OLD COMMIT TO GHER COLLECTION
        const GherAmt = oldCommitExist * 1.5;
        const moveOldCommitToGherCollection = await new Gher({
          email: pher_email,
          amount: GherAmt,
        }).save();
        if ((amount = currentPledgeAmt)) {
          const updateOldCommitsAmount2 = await Committer.findOneAndUpdate(
            { email: pher_email },
            { amount: amount, isFulfilled: true }
          );
          const setPherRecommitToTrue = await User.findOneAndUpdate(
            { email: pher_email },
            { recommit: true }
          );
          console.log("Commit Updated, isFufilled:true and Recommit:true");
          res.send("Successful");
        } else {
          const updateOldCommitsAmount3 = await Committer.findOneAndUpdate(
            { email: pher_email },
            { amount: amount, isFulfilled: false }
          );
          console.log("Commit Updated, isFufilled:false");
          res.send("Successful");
        }
      } else {
        const oldCommitAmt = oldCommitExist.amount;
        const newtotalAmt = oldCommitAmt + amount;
        if ((newtotalAmt = currentPledgeAmt)) {
          const updateOldCommitsAmount = await Committer.findOneAndUpdate(
            { email: pher_email },
            { amount: newtotalAmt, isFulfilled: true }
          );
          const setPherRecommitToTrue = await User.findOneAndUpdate(
            { email: pher_email },
            { recommit: true }
          );
          console.log("Commit Updated, isFufilled:true and Recommit:true");
          res.send("Successful");
        } else {
          const updateOldCommitsAmount2 = await Committer.findOneAndUpdate(
            { email: pher_email },
            { amount: newtotalAmt, isFulfilled: false }
          );
          console.log("Commit Updated, isFufilled:false");
          res.send("Successful");
        }
      }
    }
    // DELETE RECEIPT
    const deleteReceipt = await Receipt.findByIdAndDelete(id);
    console.log("Receipt Deleted");

    res.send("Receipt Confirm Process Completed");
  } catch (error) {
    res.json({ message: err });
  }
});
